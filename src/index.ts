import { app, BrowserWindow, ipcMain } from 'electron';
import * as process from 'process';
import env from '../env.json';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const LOADING_WINDOW_WEBPACK_ENTRY: string;
declare const NO_INTERNET_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const { GOOGLE_DRIVE_URL, ENV } = env;
const isProduction = ENV === 'production';

const appObject = {
  isAppLoaded: false,
  isNoInternetPageShown: false,
};

// Handle creating/removing shortcuts on Windows  when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const height = 1164;
  const width = 1647 + (isProduction ? 0 : 770);

  const mainWindow = new BrowserWindow({
    height,
    width,
    icon: 'src/images/icon.png',
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.loadURL(LOADING_WINDOW_WEBPACK_ENTRY).then();

  // IPC Events
  ipcMain.on(
    'online-status-changed',
    (event, data: { onlineStatus: boolean }) => {
      const { onlineStatus } = data;
      const { isAppLoaded, isNoInternetPageShown } = appObject;

      if (!onlineStatus) {
        if (!isNoInternetPageShown) {
          mainWindow.loadURL(NO_INTERNET_WINDOW_WEBPACK_ENTRY).then();
          appObject.isNoInternetPageShown = true;
          appObject.isAppLoaded = false;
        }
      } else if (!isAppLoaded) {
        mainWindow
          .loadURL(GOOGLE_DRIVE_URL)
          .then(() => {
            mainWindow.show();
            appObject.isNoInternetPageShown = false;
            appObject.isAppLoaded = true;
          })
          .catch((error) => console.error('Something went wrong', { error }));
      }
    }
  );

  // Hide main menu for production
  if (isProduction) {
    mainWindow.setMenu(null);
  }

  // Open the DevTools.
  if (!isProduction) {
    mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => createWindow());

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
